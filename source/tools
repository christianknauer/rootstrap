#!/bin/bash

# tools

# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White

# functions

Begin () {
    export ENVVAR_MODULE_NAME=$1 ; return 1
}

_TextColor () {
    local Text_Color=$Color_Off
    if [ "$1" == "INFO" ]; then
	Text_Color=$Blue
    elif [ "$1" == "DEBUG" ]; then
	Text_Color=$Purple
    elif [ "$1" == "WARN" ]; then
	Text_Color=$Yellow
    elif [ "$1" == "ERROR" ]; then
	Text_Color=$Red
    else 
	Text_Color=$BRed
    fi
    echo "$Text_Color"
}

_FormatMsg () {
    local Text_Color="$(_TextColor $1)"
    local Time_Stamp=$(date +"%d.%m.%Y %T")
    local Module_Name="${ENVVAR_MODULE_NAME:=unknown}"
    local Level=$(printf '%-5s' "$1")
    if [ "$CONFIG_STYLE_LOG" == "color" ]; then
        echo "[$Text_Color$Level$Color_Off $Time_Stamp $BWhite$Module_Name$Color_Off] $2" 
    else 
        echo "[$Level $Time_Stamp $Module_Name] $2" 
    fi
}

_Msg () {
    local MsgText=$(_FormatMsg "$1" "$2")
    if $(DebugScope); then
        echo -e "$MsgText" 
    fi
}

_MsgCat () {
    local MsgText=$(_FormatMsg "$1" "$2")
    if $(DebugScope); then
        echo -e -n "$MsgText" # ; cat "$4" 
        if [ "$CONFIG_STYLE_LOG" == "color" ]; then
            echo -e -n "$Blue" ; cat "$3" ; echo -e -n "$Color_Off"
        else 
            cat "$3" 
        fi
    fi
}

DebugScope () {
    local Module_Name="${ENVVAR_MODULE_NAME:=unknown}"
    local Scope="${Module_Name,,}"
    if [[ $CONFIG_LEVEL_SCOPE =~ "$Scope" ]]; then
	return 0
    else 
	return 1
    fi
}

DebugLevel () {
    if $(DebugScope); then
        if (( $1 <= $CONFIG_LEVEL_DEBUG )); then
	    return 0
        else 
	    return 1
        fi
    else 
	return 1
    fi
}

DebugMsg () {
    if (( $1 <= $CONFIG_LEVEL_DEBUG )); then
        _Msg DEBUG "[$1/$CONFIG_LEVEL_DEBUG] $2"
    fi
}

DebugCat () {
    if (( $1 <= $CONFIG_LEVEL_DEBUG )); then
        _MsgCat DEBUG "[$1/$CONFIG_LEVEL_DEBUG] $2" "$3"
    fi
}

DebugLs () {
    if (( $1 <= $CONFIG_LEVEL_DEBUG )); then
        ls -laR "$3" > /tmp/DebugLsDircontent.txt
	DebugCat "$1" "$2" /tmp/DebugLsDircontent.txt
        rm -f /tmp/DebugLsDircontent.txt
    fi
}

InfoMsg () {
    _Msg INFO "$1"
}

InfoCat () {
    _MsgCat INFO "$1" "$2"
}

WarnMsg () {
    _Msg WARN "$1"
}

ErrorMsg () {
    _Msg ERROR "$1"
}

ErrorCat () {
    _MsgCat ERROR "$1" "$2"
}

# render a template configuration file
# expand variables + preserve formatting

# template.txt:
# Username: ${user}
#
# use as follows:
# user="Gregory"
# render_template /path/to/template.txt > path/to/configuration_file
render_template() {
  eval "echo \"$(cat $1)\""
}

